Docbook:
http://www.lodestar2.com/people/dyork/talks/2002/ols/docbook-tutorial/frames/frames.html

 xsltproc -o test.html /usr/share/xml/docbook/stylesheet/nwalsh/xhtml/docbook.xsl test.docbook

Docbook XSL info

http://www.sagehill.net/docbookxsl/

Writing documentation using docbook -- from cern

http://xml.web.cern.ch/XML/goossens/dbatcern/


http://www.xmlhack.com/read.php?item=2061
nxml-mode


gentle guide to docbook:

http://www-106.ibm.com/developerworks/library/l-docbk.html

Docbook extensions I want to add or create :

<signaldef set="EventBus"> a list of signal definitions, or something. This will also be usable for the VHDL fu.
    <signal active="low" type="clock"> 
           <name>FOO</name>
	   <info>bar baz foo</>
    </signal>
</signaldef>

outside of a signal def, we can just reference it with <signal set="EventBus">FOO</signal>

We can use the xslt identity transform along with some custom code to essentially


for FOP:
fop -xml test.xml -xsl  /usr/share/xml/docbook/stylesheet/nwalsh/fo/docbook.xsl -pdf test2.pdf

--------------------------------------------------------------------------
Additions to docbook that we've made:
--------------------------------------------------------------------------
<addr> is an address, gets turned into <filename>

<memmap title="foobarr">
   <addr a="0x0000"> Bar </addr>
   <addr a="lala-lama"> </addr>
</memmap>


For math:
   <math>foobar</math> for inline math
   <eqn> 
	 for equation-like objects
   </eqn>




So, what is our toolchain flow?

From our original documnet:

1. extract out timing diagrams, turn them into svg files, turn those into .eps, .png, create appropriate files. 


2. Turn timing media object into associated image media objects

3. run through hardware.xsl:
    Handles <signal>
	    <memmap>, 
    turning them into native docbook, or maybe special formatting dance


4. Math: how to handle it:
   1. print output: resulting docbook + math stuff will be turned into tex by our to-tex conversion code
   2. HTML output: create images, use them inline, etc. 




How to handle interfacing with vhdl & design documents? 
    How to crop out unnecessary stuff? Viewports? 
    Obviously we need one document per figure. 

----------------------------------------------------------------------------
June 22, 2004: A new day of docbook
----------------------------------------------------------------------------

Wow, so rather than extendin' and modifyin' stuff all to hell, tonight I'm going to sit down and examine some of the docbook basics that I've been ignoring. 

First, a customization layer. I no longer think this is such crazy hoo-ha. To start with, take the "signal" tag that I've created. Ideally, it'll be turned into something nice-looking in HTML. 

so we have html.hardware.xsl which does the mydocbook -> html translation bit. 

Now, handling xrefs works okay within documents for html. Let's try including files:



