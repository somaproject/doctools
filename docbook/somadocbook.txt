This is my attempt to describe my evolution of somadocbook, my own custom docbook dialect for soma documentation

------------------------------------------------------------------------------
Image file outputs
------------------------------------------------------------------------------

So, there's this interesting problem of only wanting to keep the one instance of a file in, well, anywhere. 

We solve this by always having a build directory, and we look for the images there via our stylesheet transformations. That is, we never ever (ever?) actually include the original, but rather only use the changed copies.

We'll create an "objs" directory to store the converted media and whatnot. 

Now, issues to address:

General files
on-the-fly-created SVG [timing]
latex-generated images for, well, whatever

General files:
  reference all necessary media types (png, eps, svg) vs just the primary
  how to match primary? 
  text processing stuff? 

  So, if we have to manipulate the filenames using the stylesheets? I'd really really hate to do that. And what if we just say -fuck it- to image size issues, and do all of our processing with some assumed DPI? like 7" -> 1024 px or something. 
  Okay, fine, that lets us have a single file, "obj/foo"
  Does it really auto-change the filename? Yes, via graphic.default.extension, which must be at the beginning. 


Giving up, because duh, it can't handle the whole "image.FSM.svg" thing. Damn you, docbook. We're just going to copy a large chunk of the media object naming code into our custom stylesheet, I guess...

So instead we have a target intermediary file output location, and we say "if the filename extension is any of the following:
     .svg
     .png
     .eps
     .pdf

we stick on a ".png" onto the end of the filename and reference it in the target directory. 

Thus the initial need for the makefile... thus we create docmake.py


Now, the thing that sucks is there's no good way of converting svg to eps at all. 

Batik sucks so much that, tonight, I'm going to try and add command-line support, fix bugs in inkscape. 



-----------------------------------------------------------------------
Timing
-----------------------------------------------------------------------
We've created a script to take timing objects inside of media objects and turn them into svg files. 

Thus, we'll need to then figure out some way of turning said svg files into something inside of the docbook text itself. But at the moment:

     <figure id="AnotherFigure">
        <mediaobject>
	<timingobject id="timingEventbus"> 
            lalalala
          </timingobject>
          <caption>
            <para>Timing on the event bus -- everybody climb aboard! 
            </para>
          </caption>
        </mediaobject>
      </figure>

so our *.hardware.xsl docbook customization sheet needs to be smart enough to turn a <timingobject id=foo> into an image include. The obvious way to do this is to perform the customization of the docbook html stylesheet with the mediaobject, but figuruing out how to do that has proven most difficult


java -Xmx128m -Djava.awt.headless=true -jar batik-rasterizer.jar -w 1024 -d /tmp/test.eps  ~/soma/docs/tools/docbook/tests/eventbustiming.timing.svg 



Script: 
HTML: Done, although still need to perform image translations
LaTeX: Not Done

-----------------------------------------------------------------------------
SIGNALS
-----------------------------------------------------------------------------
Custom outputs: signals are of the form <signal>foo[bits:bits]</signal>

Done using some interesting xslt-based conditionals and whatnot


Script:
HTML: Done, at least, in terms of subscript-stuff


